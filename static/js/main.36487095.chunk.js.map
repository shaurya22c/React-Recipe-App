{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAiBeA,EAfD,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YACpC,OACI,sBAAKC,UAAYC,IAAMC,OAAvB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,4BAAIR,IACJ,qBAAKS,IAAMR,EAAOS,IAAK,SCgDpBC,EAvDJ,WAET,IAFc,EAMcC,mBAAS,IANvB,mBAMRC,EANQ,KAMCC,EAND,OAOYF,mBAAS,IAPrB,mBAORG,EAPQ,KAOAC,EAPA,OAQUJ,mBAAS,UARnB,mBAQRK,EARQ,KAQDC,EARC,KAUdC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAE,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,qCAWG,cACVM,EADU,gBAEEA,EAASC,OAFX,OAEVC,EAFU,OAGhBC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MAJA,2CAAF,qDAmBhB,OACE,sBAAKzB,UAAW,MAAhB,UACE,uBAAM0B,SATO,SAAAC,GAEfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKoBb,UAAW,cAAvC,UACE,uBAAOA,UAAW,aAAa6B,KAAM,OAAOC,MAAOlB,EAAQmB,SAf7C,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,UAef,wBAAQ9B,UAAW,gBAAgB6B,KAAM,SAAzC,uBAEF,qBAAK7B,UAAW,UAAhB,SAECU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEAN,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJrBG,EAAOA,OAAO+B,gBCpCbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.36487095.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\nconst Recipe= ({title, calories, image, ingredients})=>{\r\n    return(\r\n        <div className= {style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient=> (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img src= {image} alt= \"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect, useState} from \"react\";\nimport './App.css';\nimport Recipe from './Recipe';\n\n//here App.js and Recipe.js are components\nconst App= ()=> {\n\n  const APP_ID= \"164ae060\";\n  const APP_KEY= \"405566ec9e4d545568498b16dc4f1835\";\n\n  //creating states\n  const[recipes, setRecipes]= useState([]);\n  const[search, setSearch]= useState(\"\");\n  const[query, setQuery]= useState('banana');\n\n  useEffect( ()=>{\n    getRecipes();\n  }, [query]);\n\n  const getRecipes= async ()=>{\n    const response= await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data= await response.json();\n    console.log(data.hits);\n    setRecipes(data.hits);\n  };\n\n  const updateSearch= e=>{\n    setSearch(e.target.value);\n    // console.log(search);\n  }\n\n  const getSearch= e=>{\n    //preventing page refresh\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n// here title, calories, image, ingredients are props. we send props(properties) from one component to another in react\n  return(\n    <div className= \"App\">\n      <form onSubmit= {getSearch} className= \"search-form\">\n        <input className= \"search-bar\" type= \"text\" value={search} onChange={updateSearch}/>\n        <button className= \"search-button\" type= \"submit\">Search</button>\n      </form>\n      <div className= \"recipes\">\n     \n      {recipes.map(recipe=> (\n        <Recipe \n        key= {recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1Kos8\",\"image\":\"recipe_image__2tDU5\"};"],"sourceRoot":""}